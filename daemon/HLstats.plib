# Original development:
# +
# + HLStats - Real-time player and clan rankings and statistics for Half-Life
# + http://sourceforge.net/projects/hlstats/
# +
# + Copyright (C) 2001  Simon Garner
# +
#
# Additional development:
# +
# + UA HLStats Team
# + http://www.unitedadmins.com
# + 2004 - 2007
# +
#
#
# Current development:
# +
# + Johannes 'Banana' KeÃŸler
# + http://hlstats.sourceforge.net
# + 2007 - 2008
# +
#
# HLStats - Real-time player and clan rankings and statistics for Half-Life
# http://sourceforge.net/projects/hlstats/
#
# Copyright (C) 2001  Simon Garner
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
#


# HLStats release version number
our $g_version = "development version";

%PATTERNS = ();
%NAMES    = ();

##
## Common Functions
##

#
# void error (string errormsg)
#
# Dies, and optionally mails error messages to $g_mailto.
#

sub error
{
	my $errormsg = $_[0];

	if ($g_mailto && $g_mailpath)
	{
		system("echo \"$errormsg\" | $g_mailpath -s \"HLStats crashed `date`\" $g_mailto");
	}

	die("$errormsg\n");
}


#
# string quoteSQL (string varQuote)
#
# Escapes all quote characters in a variable, making it suitable for use in an
# SQL query. Returns the escaped version.
#

sub quoteSQL
{
	my $varQuote = $_[0];

	$varQuote =~ s/\\/\\\\/g;	# replace \ with \\
	$varQuote =~ s/'/\\'/g;		# replace ' with \'

	return $varQuote;
}


#
# result doQuery (string query)
#
# Executes the SQL query 'query' and returns the result identifier.
#

sub doQuery
{
	my ($query, $callref) = @_;

	# fix for "mysql Server has gone away"
	$db_conn ||= DBI->connect("DBI:mysql:$db_name:$db_host",$db_user, $db_pass,
				{ 'RaiseError' => 'mysql_enable_utf8' => 1, 'mysql_auto_reconnect' => 1,
					'ShowErrorStatement' => 1})
			or error("Unable to connect to MySQL server");

	my $result = $db_conn->prepare($query)
		or error("Unable to prepare query:\n$query\n$DBI::errstr\n$callref");
	$result->execute
		or error("Unable to execute query:\n$query\n$DBI::errstr\n$callref");

	return $result;
}


#
# string resolveIp (string ip, boolean quiet)
#
# Do a DNS reverse-lookup on an IP address and return the hostname, or empty
# string on error.
#

sub resolveIp {
	my ($ip, $quiet) = @_;
	my ($host) = "";

	unless ($g_dns_resolveip) {
		return "";
	}

	print "-- Resolving hostname (timeout $g_dns_timeout sec) for IP \"$ip\" ... "  if ($g_debug > 0 && !$quiet);

	eval {
		$SIG{ALRM} = sub { die "DNS Timeout\n" };
		alarm $g_dns_timeout;	# timeout after $g_dns_timeout sec
		$host = gethostbyaddr(inet_aton($ip), AF_INET);
		alarm 0;
	};

	if ($@) {
		my $error = $@;
		chomp($error);

		print "Error: $error ($host) ... "  if ($g_debug > 0 && !$quiet);
		$host = "";		# some error occurred
	}
	elsif (!defined($host)) {
		print "(No Host) ... "  if ($g_debug > 0 && !$quiet);
		$host = "";		# ip did not resolve to any host
	}

	$host = lc($host);	# lowercase

	print "\"$host\"\n"  if ($g_debug > 0 && !$quiet);

	chomp($host);
	return $host;
}


#
# void doConf (object conf, hash directives)
#
# Walk through configuration directives, setting values of global variables.
#

sub doConf
{
	my ($conf, %directives) = @_;

	while (($directive, $variable) = each(%directives))
	{
		my ($value) = $conf->get($directive);

		if (defined($value))
		{
			$$variable = $value;
		}
	}
}


#
# string rcon (string command[, string server_ip[, string server_port]])
#
# Executes the given command via Rcon.
#

sub rcon
{
	my ($command, $private) = @_;

	return 0  unless ($g_rcon);

	$server_ip   = $s_peerhost;
	$server_port = $s_peerport;
	my ($server_type) = "new"; # Default to HL1 rcon

	my $result = &doQuery("
		SELECT
			${db_prefix}_Servers.rcon_password,
			${db_prefix}_Games.source AS source
		FROM
			${db_prefix}_Servers
		LEFT JOIN ${db_prefix}_Games ON
			${db_prefix}_Games.code = ${db_prefix}_Servers.game
		WHERE
			${db_prefix}_Servers.address='$server_ip'
		AND
			${db_prefix}_Servers.port='$server_port'
	");
	my ($password, $source) = $result->fetchrow_array();
	$result->finish;

	$server_type = "source" if ($source);

	if ($password) {
		&printNotice("Doing rcon: $server_ip:$server_port, \"$password\", \"$command\"");
		my $rcon;
		$rcon = new KKrcon(
			Password=>$password,
			Host=>$server_ip,
			Port=>$server_port,
			Type=>$server_type
		);

		if($private) {
			if($g_rcon_say eq "admin_psay") {
				$command = "admin_command admin_psay ".$command;
			}
			elsif ($g_rcon_say eq "amx_psay") {
				$command = "amx_psay ".$command;
			}
			elsif ($g_rcon_say eq "sm_psay") {
				$command = "sm_psay ".$command;
			}
			else {
				return ""; # if we have set to prive msg but have RconSay to "say" then do nothing
			}
		}
		else {
			$command = "say ".$command;
		}

		my $result = $rcon->execute($command);

		if (my $error = $rcon->error())
		{
			&printNotice("Rcon error: $error");
		}
	}
	else
	{
		return "";
	}
}



#
# string abbreviate (string thestring[, int maxlength)
#
# Returns thestring abbreviated to maxlength-3 characters plus "...", unless
# thestring is shorter than maxlength.
#

sub abbreviate
{
	my ($thestring, $maxlength) = @_;

	$maxlength = 12  unless ($maxlength);

	if (length($thestring) > $maxlength)
	{
		$thestring = substr($thestring, 0, $maxlength - 3);
		return "$thestring...";
	}
	else
	{
		return $thestring;
	}
}

#
# void printEvent (int code, string description)
#
# Logs event information to stdout.
#
sub printEvent {
	my ($code, $description) = @_;

	if ($g_debug > 0) {
		print localtime(time) . "" unless ($ev_timestamp);
		printf("%s: %21s - E%03d: %s\n",
			$ev_timestamp, $s_addr, $code, $description);
	}
}

#
# void printNotice (string notice)
#
# Prins a debugging notice to stdout.
#
sub printNotice {
	my ($notice) = @_;

	if ($g_debug > 1)
	{
		print ">> $notice\n";
	}
}

#
# void recordEvent (string table, array cols, bool getid, [mixed eventData ...])
#
# Adds an event to an Events table.
#
sub recordEvent {
	my $table = shift;
	my $getid = shift;
	my @coldata = @_;

	my @cols = @{$g_eventTables{$table}};
	my $lastid = -1;

	my $insertType = "";
	$insertType = " DELAYED" if ($db_lowpriority);

	my $query = "
		INSERT$insertType INTO
			${db_prefix}_Events_$table
			(
				eventTime,
				serverId,
				map"
	;

	foreach $i (@cols)
	{
		$query .= ",\n$i";
	}

	$query .= "
			)
		VALUES
		(
			$ev_datetime,
			'$g_servers{$s_addr}->{id}',
			'$g_servers{$s_addr}->{map}'"
	;

	for $i (@coldata)
	{
		$query .= ",\n'" . &quoteSQL($i) . "'";
	}

	$query .= "
		)
	";

	my $result = &doQuery($query);

	if ($getid)
	{
		$result = &doQuery("SELECT LAST_INSERT_ID()");
		($lastid) = $result->fetchrow_array;
		return $lastid;
	}

	$result->finish;
}

#
# check if the event is availabe in the DB
#
sub checkEvent {
	my ($eventCode,$event) = @_;

	my %switch = ( "Frags" => "Weapons");
	if($switch{$event}) {
		my $query = &doQuery("SELECT code
					FROM ${db_prefix}_$switch{$event}
					WHERE code = '$eventCode'");
		my $wc = $query->fetchrow_array();
		$query->finish;
		if($wc) {
			return $wc;
		}
		else {
			return 0;
		}
	}
	else {
		return 0;
	}
}


#
# array calcSkill (int killerSkill, int victimSkill, string weapon)
#
# Returns an array, where the first index contains the killer's new skill, and
# the second index contains the victim's new skill.
#
sub calcSkill
{
	my ($killerSkill, $victimSkill, $weapon) = @_;
	my @newSkill;

	$killerSkill = 1 if ($killerSkill < 1);
	$victimSkill = 1 if ($victimSkill < 1);

	if ($g_debug > 2)
	{
		&printNotice("Begin calcSkill: killerSkill=$killerSkill");
		&printNotice("Begin calcSkill: victimSkill=$victimSkill");
	}

	# Look up the weapon's skill modifier
	my $query = "
		SELECT
			modifier
		FROM
			${db_prefix}_Weapons
		WHERE
			code='" . &quoteSQL($weapon) . "' AND
			game='$g_servers{$s_addr}->{game}'
	";
	my $result = &doQuery($query);

	if ($result->rows)
	{
		($modifier) = $result->fetchrow_array;
	}
	else
	{
		# if the weapon has no modifier specified, then we default to 1.
		$modifier = 1.00;
	}
	$result->finish;

	# Calculate the new skills
	my $killerSkillChange = ($victimSkill / $killerSkill) * 5 * $modifier;
	my $victimSkillChange = ($victimSkill / $killerSkill) * 5 * $modifier;

	if ($killerSkillChange > $g_skill_maxchange)
	{
		&printNotice("Capping killer skill change of $killerSkillChange to $g_skill_maxchange") if ($g_debug > 2);
		$killerSkillChange = $g_skill_maxchange;
	}
	if ($victimSkillChange > $g_skill_maxchange)
	{
		&printNotice("Capping victim skill change of $victimSkillChange to $g_skill_maxchange") if ($g_debug > 2);
		$victimSkillChange = $g_skill_maxchange;
	}

	$killerSkill += $killerSkillChange;
	$victimSkill -= $victimSkillChange;

	# we want int not float
	$killerSkill = sprintf("%d", $killerSkill + 0.5);
	$victimSkill = sprintf("%d", $victimSkill + 0.5);

	if ($g_debug > 2)
	{
		&printNotice("End calcSkill: killerSkill=$killerSkill");
		&printNotice("End calcSkill: victimSkill=$victimSkill");
	}

	return ($killerSkill, $victimSkill, $modifier);
}


#
# void rewardTeam (string team, int reward, int actionid)
#
# Gives members of 'team' an extra 'reward' skill points. Members of the team
# who have been inactive (no events) for more than 2 minutes are not rewarded.
#
sub rewardTeam
{
	my ($team, $reward, $actionid) = @_;

	my $player;

	&printNotice("Rewarding team \"$team\" with \"$reward\" skill for action \"$actionid\" ...");

	foreach $player (values(%g_players))
	{
		my $player_team = $player->get("team");
		my $player_server = $player->get("server");
		my $player_timestamp = $player->get("timestamp");

		if ($player_team eq $team && $player_server eq $s_addr
			&& ($ev_unixtime - $player_timestamp < 120))
		{
			if ($g_debug > 2)
			{
				&printNotice("Rewarding " . $player->getInfoString() . " with \"$reward\" skill for action \"$actionid\"");
			}

			&recordEvent(
				"TeamBonuses", 0,
				$player->get("playerid"),
				$actionid,
				$reward
			);

			$player->increment("skill", $reward, 1);
			$player->updateDB();
			if($g_rating_system eq "1" || $g_rating_system eq "2") {
               	$ratingsys->player_scored($player, $reward);
            }
		}
	}
}


#
# int getPlayerId (int uniqueId)
#
# Looks up a player's ID number, from their unique (WON) ID. Returns their PID.
#
sub getPlayerId
{
	my ($uniqueId) = @_;

	my $query = "
		SELECT
			playerId
		FROM
			${db_prefix}_PlayerUniqueIds
		WHERE
			uniqueId='" . &::quoteSQL($uniqueId) . "' AND
			game='" . $g_servers{$s_addr}->{game} . "'
	";
	my $result = &doQuery($query);

	if ($result->rows)
	{
		my ($playerId) = $result->fetchrow_array;
		$result->finish;
		return $playerId;
	}
	else
	{
		$result->finish;
		return 0;
	}
}

#
# int updatePlayerProfile (object player, string field, string value)
#
# Updates a player's profile information in the database.
#
sub updatePlayerProfile
{
	my ($player, $field, $value) = @_;

	unless ($player)
	{
		&printNotice("updatePlayerInfo: Bad player");
		return 0;
	}

	$value = &quoteSQL($value);

	if ($value eq "none" || $value eq " ")
	{
		$value = "";
	}

	my $playerName = &abbreviate($player->get("name"));
	my $playerId   = $player->get("playerid");

	&doQuery("
		UPDATE
			${db_prefix}_Players
		SET
			$field='$value'
		WHERE
			playerId='$playerId'
	");

	&rcon("SET command successful for '$playerName'.",1);
	return 1;
}


#
# mixed getClanId (string name)
#
# Looks up a player's clan ID from their name. Compares the player's name to tag
# patterns in hlstats_ClanTags. Patterns look like:  [AXXXXX] (matches 1 to 6
# letters inside square braces, e.g. [ZOOM]Player)  or  =\*AAXX\*= (matches
# 2 to 4 letters between an equals sign and an asterisk, e.g.  =*RAGE*=Player).
#
# Special characters in the pattern:
#    A    matches one character  (i.e. a character is required)
#    X    matches zero or one characters  (i.e. a character is optional)
#    a    matches literal A or a
#    x    matches literal X or x
#
# If no clan exists for the tag, it will be created. Returns the clan's ID, or
# 0 if the player is not in a clan.
#
sub getClanId
{
	my ($name) = @_;

	my $clanTag  = "";
	my $clanName = "";
	my $clanId   = 0;

	my $result = &doQuery("
		SELECT
			pattern,
			position,
			LENGTH(pattern) AS pattern_length
		FROM
			${db_prefix}_ClanTags
		ORDER BY
			pattern_length DESC,
			id
	");

	while ( my($pattern, $position) = $result->fetchrow_array)
	{
		my $regpattern = quotemeta($pattern);
		$regpattern =~ s/([A-Za-z0-9]+[A-Za-z0-9_-]*)/\($1\)/; # to find clan name from tag
		$regpattern =~ s/A/./g;
		$regpattern =~ s/X/.?/g;

		if ($g_debug > 2)
		{
			&printNotice("regpattern=$regpattern");
		}

		if ((($position eq "START" || $position eq "EITHER") && $name =~ /^($regpattern).+/i) ||
			(($position eq "END"   || $position eq "EITHER") && $name =~ /.+($regpattern)$/i))
		{
			if ($g_debug > 2)
			{
				&printNotice("pattern \"$regpattern\" matches \"$name\"! 1=\"$1\" 2=\"$2\"");
			}

			$clanTag  = $1;
			$clanName = $2;
			last;
		}
	}

	unless ($clanTag)
	{
		return 0;
	}

	my $query = "
		SELECT
			clanId
		FROM
			${db_prefix}_Clans
		WHERE
			tag='" . &quoteSQL($clanTag) . "' AND
			game='$g_servers{$s_addr}->{game}'
	";
	$result = &doQuery($query);

	if ($result->rows)
	{
		($clanId) = $result->fetchrow_array;
		$result->finish;
		return $clanId;
	}
	else
	{
		# The clan doesn't exist yet, so we create it.
		$query = "
			INSERT INTO
				${db_prefix}_Clans
				(
					tag,
					name,
					game
				)
			VALUES
			(
				'" . &quoteSQL($clanTag)  . "',
				'" . &quoteSQL($clanName) . "',
				'$g_servers{$s_addr}->{game}'
			)
		";
		$result = &doQuery($query);
		$result->finish;

		$result = &doQuery("SELECT LAST_INSERT_ID()");
		($clanId) = $result->fetchrow_array;

		&printNotice("Created clan \"$clanName\" <C:$clanId> with tag "
				. "\"$clanTag\" for player \"$name\"");

		return $clanId;
	}
}


#
# object getServer (string address, int port)
#
# Looks up a server's ID number in the Servers table, by searching for a
# matching IP address and port. NOTE you must specify IP addresses in the
# Servers table, NOT hostnames.
#
# Returns a new "Server object".
#
sub getServer
{
	my ($address, $port) = @_;

	my $query = "
		SELECT
			serverId,
			game,
			defaultMap
		FROM
			${db_prefix}_Servers
		WHERE
			address='$address' AND
			port='$port'
	";
	my $result = &doQuery($query);

	if ($result->rows) {
		my ($serverId, $game, $defaultMap) = $result->fetchrow_array;
		$result->finish;

		if($defaultMap eq "") {
			$defaultMap = '';
		}

		return new HLstats_Server($serverId, $address, $port, $game, $defaultMap);
	}
	else {
		$result->finish;

		return 0;
	}
}

#
# boolean sameTeam (string team1, string team2)
#
# This should be expanded later to allow for team alliances (e.g. TFC-hunted).
#
sub sameTeam
{
	my ($team1, $team2) = @_;

	if ($team1 eq $team2)
	{
		if ($team1 ne "" && $team1 ne "Unassigned")
		{
			return 1;
		}
		else
		{
			return 0;
		}
	}
	else
	{
		return 0;
	}
}

#
# string getPlayerInfoString (object player, string ident)
#
sub getPlayerInfoString
{
	my ($player) = shift;
	my @ident = @_;

	if ($player) {
		return $player->getInfoString();
	}
	else {
		return "(" . join(",", @ident) . ")";
	}
}


#
# array getPlayerInfo (string player, string forced_uniqueid)
#
# Get a player's name, uid, wonid and team from "Name<uid><wonid><team>".
#
sub getPlayerInfo
{
	my ($player, $forced_uniqueid) = @_;

	my $name,$userid,$uniqeid,$team,$role;

	if ($player =~ /^([^<]+)<(\d+)><([^<>]*)><([^<>]*)><([^<>]*)>/) {
		#
		# L4D support
		#
		$name     = $1;
		$userid   = $2;
		$uniqueid = $3;
		$team     = $4;
		$role  = $5;

		# the zombies do not have a uniqueid
		if(!$uniqueid) {
			$uniqueid = "zombie:".$userid;
			$name .= ":".$userid;
		}
	}
	elsif ($player =~ /^(.+)<(\d+)><([^<>]+)><([^<>]*)>$/) {
		#
		# normal hl games
		#
		$name     = $1;
		$userid   = $2;
		$uniqueid = $3;
		$team     = $4;
	}
	else {
		return 0;
	}

	# Don't connect Mr. Console or HLTV or BOT, they should not be recorded as players!
	return 0 if ($uniqueid eq "Console");
	return 0 if ($uniqueid eq "HLTV");
	if($g_ignore_bots) {
		return 0 if ($uniqueid eq "BOT");
	}


	if ($forced_uniqueid) {
		$uniqueid = $forced_uniqueid;
	}
	elsif ($g_mode eq "NameTrack") {
		$uniqueid = $name;
	}
	else {
		if (($uniqueid =~ /PENDING/) || ($uniqueid =~ /VALVE_ID_LAN/)) {
			return {
				name     => $name,
				userid   => $userid,
				uniqueid => $uniqueid,
				team     => $team
			};
		}
		elsif($uniqueid =~ /BODT/) {
			$md5 = Digest::MD5->new;
			$md5->add($name);
			$md5->add($s_addr);

			$uniqueid = "BOT:" . $md5->hexdigest;
			$forced_uniqueid = $uniqueid if ($g_mode eq "LAN");
		}
	}

	if ($g_players{"$s_addr/$userid"})
	{
		$haveplayer = 1;
	}
	else
	{
		$haveplayer = 0;
	}

	if ($haveplayer &&
		$g_players{"$s_addr/$userid"}->get("uniqueid") eq $uniqueid)
	{
		my $player = $g_players{"$s_addr/$userid"};

		$player->set("name", $name);
		$player->set("team", $team);

		$player->updateTimestamp();
	}
	else
	{
		if ($g_mode ne "LAN" || $forced_uniqueid) {

			# Add the player to our hash of player objects

			$g_players{"$s_addr/$userid"} = new HLstats_Player(
				server => $s_addr,
				userid => $userid,
				uniqueid => $uniqueid,
				name => $name,
				team => $team
			);

			# Increment number of players on server

			$g_servers{$s_addr}->{numplayers}++ if (!$haveplayer);
			&printNotice("NumPlayers ($s_addr): $g_servers{$s_addr}->{numplayers} (Connect)");

			delete($g_lan_noplayerinfo_hack->{"$userid"}) if ($g_lan_hack);
		}
		elsif ($g_mode eq "LAN" && $g_lan_hack &&
				$g_lan_noplayerinfo_hack->{"$userid"}->{"name"} eq $name &&
				$g_lan_noplayerinfo_hack->{"$userid"}->{"server"} eq $s_addr)
		{
			$g_players{"$s_addr/$userid"} = new HLstats_Player(
				server => $s_addr,
				userid => $userid,
				uniqueid => $g_lan_noplayerinfo_hack->{"$userid"}->{"ipaddress"},
				name => $name,
				team => $team
			);

			delete($g_lan_noplayerinfo_hack->{"$userid"});

			$g_servers{$s_addr}->{numplayers}++ if (!$haveplayer);
			&printNotice("NumPlayers ($s_addr): $g_servers{$s_addr}->{numplayers} (LAN Connect)");
		}
		else
		{
			&printNotice("No player object available for player \"$name\" <U:$userid>");
		}
	}

	return {
		name     => $name,
		userid   => $userid,
		uniqueid => $uniqueid,
		team     => $team,
		role    => $role
	};
}


#
# hash getProperties (string propstring)
#
# Parse (key "value") properties into a hash.
#
sub getProperties
{
	my ($propstring) = @_;
	my %properties;

	while ($propstring =~ s/^\s*\((\S+)(?: "([^"]+)")?\)//) {
		if (defined($2)) {
			$properties{$1} = $2;
		}
		else {
			$properties{$1} = 1; # boolean property
		}
	}

	return %properties;
}

#
# boolean like (string subject, string compare)
#
# Returns true if 'subject' equals 'compare' with optional whitespace.
#
sub like
{
	my ($subject, $compare) = @_;

	if ($subject =~ /^\s*\Q$compare\E\s*$/)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

## decied if we are STDIN or log file via udp socket
sub getLine {
	if ($g_stdin) {
		return <STDIN>;
	}
	else {
		return 1;
	}
}

1;
